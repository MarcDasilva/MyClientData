from fastapi import FastAPI, File, UploadFile
import numpy as np
import cv2
import dlib
import pickle
from pymongo import MongoClient

# Initialize FastAPI
app = FastAPI()

# Load Face Detector and Recognizer
detector = dlib.get_frontal_face_detector()
sp = dlib.shape_predictor("shape_predictor_68_face_landmarks.dat")
facerec = dlib.face_recognition_model_v1("dlib_face_recognition_resnet_model_v1.dat")

# Connect to MongoDB
client = MongoClient("mongodb://localhost:27017/")
db = client["face_db"]
collection = db["faces"]

# Function to get face embeddings
def get_face_embedding(image):
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    faces = detector(gray)
    
    if len(faces) == 0:
        return None
    
    shape = sp(gray, faces[0])
    face_descriptor = facerec.compute_face_descriptor(image, shape)
    return np.array(face_descriptor)

# API to register a new face
@app.post("/register")
async def register_face(name: str, file: UploadFile = File(...)):
    contents = await file.read()
    np_image = np.frombuffer(contents, np.uint8)
    image = cv2.imdecode(np_image, cv2.IMREAD_COLOR)

    embedding = get_face_embedding(image)
    if embedding is None:
        return {"error": "No face detected"}
    
    collection.insert_one({"name": name, "embedding": pickle.dumps(embedding)})
    return {"message": f"Face registered for {name}"}

# API to recognize a face
@app.post("/recognize")
async def recognize_face(file: UploadFile = File(...)):
    contents = await file.read()
    np_image = np.frombuffer(contents, np.uint8)
    image = cv2.imdecode(np_image, cv2.IMREAD_COLOR)

    new_embedding = get_face_embedding(image)
    if new_embedding is None:
        return {"error": "No face detected"}
    
    # Compare with stored faces
    recognized_name = "Unknown"
    min_distance = float("inf")
    
    for doc in collection.find():
        stored_embedding = pickle.loads(doc["embedding"])
        distance = np.linalg.norm(new_embedding - stored_embedding)
        if distance < 0.6 and distance < min_distance:
            min_distance = distance
            recognized_name = doc["name"]

    return {"name": recognized_name}
